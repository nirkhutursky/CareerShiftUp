import 'package:flutter/material.dart';

class SharedLayout extends StatefulWidget {
  final Widget child;

  const SharedLayout({super.key, required this.child});

  @override
  _SharedLayoutState createState() => _SharedLayoutState();
}

class _SharedLayoutState extends State<SharedLayout> {
  int? expandedCategoryIndex;
  bool isHoveringCategory = false;
  bool isHoveringSubmenu = false;

  final List<Map<String, dynamic>> categories = [
    {
      'title': 'Resume Building Tools',
      'icon': Icons.build,
      'features': [
        {
          'title': 'Resume Tailoring with AI',
          'route': '/resumeTailoring',
          'icon': Icons.tune,
          'description':
              'Use AI to tailor your resume to specific job descriptions.',
        },
        {
          'title': 'Build Resume',
          'route': '/personalInfo',
          'icon': Icons.edit,
          'description':
              'Start building your resume with personal information.',
        },
        {
          'title': 'AI Resume & Cover Letter Generator',
          'route': '/resumeGenerator',
          'icon': Icons.description,
          'description': 'Generate resumes and cover letters using AI.',
        },
        {
          'title': 'Portfolio Builder',
          'route': '/portfolioBuilder',
          'icon': Icons.folder_special,
          'description': 'Create portfolios for creative fields.',
        },
        {
          'title': 'Skill-Based Resumes & Learning Suggestions',
          'route': '/skillBasedResumes',
          'icon': Icons.list_alt,
          'description':
              'Create skill-focused resumes and get learning suggestions.',
        },
      ],
    },
    {
      'title': 'Job Application Management',
      'icon': Icons.work,
      'features': [
        {
          'title': 'Application Tracker Dashboard',
          'route': '/applicationTracker',
          'icon': Icons.track_changes,
          'description': 'Manage and track your job applications.',
        },
        {
          'title': 'Job Market Trends & Salary Estimation',
          'route': '/marketTrends',
          'icon': Icons.trending_up,
          'description': 'View job market trends and estimate salaries.',
        },
      ],
    },
    {
      'title': 'Career Development Tools',
      'icon': Icons.school,
      'features': [
        {
          'title': 'Interview Preparation with AI',
          'route': '/interviewPrep',
          'icon': Icons.question_answer,
          'description': 'Practice interview questions generated by AI.',
        },
        {
          'title': 'Task Management & Goal Setting',
          'route': '/tasks',
          'icon': Icons.check_circle_outline, // Task-related icon
          'description':
              'Manage and set tasks for job applications and career goals.',
        },
      ],
    },
  ];

  void _updateHoverState(bool isCategoryHover, bool isSubmenuHover) {
    setState(() {
      isHoveringCategory = isCategoryHover;
      isHoveringSubmenu = isSubmenuHover;
    });
  }

  @override
  Widget build(BuildContext context) {
    final double appBarHeight = kToolbarHeight - 65;

    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            TextButton(
              onPressed: () {
                if (ModalRoute.of(context)?.settings.name != '/') {
                  Navigator.pushReplacementNamed(context, '/');
                }
              },
              child: const Text(
                'Home',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                ),
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Row(
                  children: List.generate(categories.length, (index) {
                    final category = categories[index];
                    return MouseRegion(
                      onEnter: (_) {
                        _updateHoverState(true, false);
                        setState(() {
                          expandedCategoryIndex = index;
                        });
                      },
                      onExit: (_) {
                        _updateHoverState(false, isHoveringSubmenu);
                        Future.delayed(const Duration(milliseconds: 50), () {
                          if (!isHoveringCategory && !isHoveringSubmenu) {
                            setState(() {
                              expandedCategoryIndex = null;
                            });
                          }
                        });
                      },
                      child: Container(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16.0, vertical: 12.0),
                        margin: const EdgeInsets.symmetric(horizontal: 8.0),
                        decoration: BoxDecoration(
                          color: expandedCategoryIndex == index
                              ? Colors.blue[700]
                              : Colors.blueAccent,
                          borderRadius: BorderRadius.circular(8.0),
                        ),
                        child: Row(
                          children: [
                            Icon(category['icon'],
                                color: Colors.white, size: 24),
                            const SizedBox(width: 8),
                            Text(
                              category['title'],
                              style: const TextStyle(
                                  fontSize: 16, color: Colors.white),
                            ),
                          ],
                        ),
                      ),
                    );
                  }),
                ),
              ),
            ),
          ],
        ),
        backgroundColor: Colors.blueAccent,
        automaticallyImplyLeading: false, // Disable back arrow on HomePage
      ),
      body: Stack(
        children: [
          // Main Content with grey background when category is expanded
          Positioned.fill(
            child: Container(
              color: expandedCategoryIndex != null
                  ? Colors.black.withOpacity(0.7) // Grey overlay when expanded
                  : Colors.transparent,
              child: widget.child, // The child content for each page
            ),
          ),
          // Subcategories Dropdown directly below the top row (AppBar)
          if (expandedCategoryIndex != null)
            Positioned(
              top: appBarHeight,
              left: 0,
              right: 0,
              child: MouseRegion(
                onEnter: (_) {
                  _updateHoverState(false, true); // Hovering submenu
                },
                onExit: (_) {
                  _updateHoverState(isHoveringCategory, false); // Leave submenu
                  Future.delayed(const Duration(milliseconds: 50), () {
                    if (!isHoveringCategory && !isHoveringSubmenu) {
                      setState(() {
                        expandedCategoryIndex = null;
                      });
                    }
                  });
                },
                child: Container(
                  color: Colors.blue[100],
                  child: SingleChildScrollView(
                    child: Column(
                      children: categories[expandedCategoryIndex!]['features']
                          .map<Widget>((feature) {
                        return ListTile(
                          leading:
                              Icon(feature['icon'], color: Colors.blueAccent),
                          title: Text(feature['title']),
                          subtitle: Text(feature['description']),
                          onTap: () {
                            Navigator.pushNamed(context, feature['route']);
                            // Collapse the submenu after navigation
                            setState(() {
                              expandedCategoryIndex = null;
                            });
                          },
                        );
                      }).toList(),
                    ),
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }
}
